C51 COMPILER V7.06   TX                                                                    04/04/2018 16:23:21 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE TX
OBJECT MODULE PLACED IN tx.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE tx.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include<reg51.h> //speed control of DC motor
   2          #include<string.h>
   3          
   4          #define lcd_data P2
   5          
   6          
   7          sbit  lcd_rs   =  P2^0;  // Here we are using LCD in four bit mode that's why LCD's Data pins and control 
   8          sbit  lcd_en   =  P2^1;
   9          
  10          
  11          sbit sw1 = P3^0;
  12          sbit sw2 = P3^1;
  13          sbit sw3 = P3^2;
  14          sbit sw4 = P3^3;
  15          sbit sw5 = P3^4;
  16          
  17          sbit sw6 = P0^0;
  18          sbit sw7 = P0^1;
  19          sbit sw8 = P0^2;
  20          
  21          
  22          sbit sw9 = P0^3;
  23          sbit swa = P0^4;
  24          sbit swb = P0^5;
  25          
  26          
  27          
  28          sbit swc = P0^6;
  29          sbit swd = P0^7;
  30          
  31          
  32          
  33          
  34          void delay(unsigned int value)
  35          
  36           {
  37   1         unsigned int x,y;
  38   1         for(x=0;x<value;x++)
  39   1         for(y=0;y<200;y++);
  40   1       } 
  41          
  42          void lcdcmd(unsigned char value)                   // LCD COMMAND
  43            {
  44   1            
  45   1      //      lcd_data=value; //slcd_end msb 4 bits
  46   1      //      lcd_rs=0;         //select command register
  47   1      //      lcd_en=1;         //lcd_enable the lcd to execute command
  48   1      //        delay(10);
  49   1      //        lcd_en=0; 
  50   1      //        delay(10);
  51   1              
  52   1               lcd_data=value&(0xf0); //slcd_end msb 4 bits
  53   1            lcd_rs=0;   //select command register
  54   1            lcd_en=1;   //lcd_enable the lcd to execute command
  55   1                delay(3);
C51 COMPILER V7.06   TX                                                                    04/04/2018 16:23:21 PAGE 2   

  56   1                lcd_en=0;  
  57   1            lcd_data=((value<<4)&(0xf0));      //slcd_end lsb 4 bits
  58   1            lcd_rs=0;  //select command register
  59   1            lcd_en=1;  //lcd_enable the lcd to execute command
  60   1                delay(3);
  61   1                lcd_en=0;  
  62   1            
  63   1        }  
  64                  
  65          
  66          void lcd_init(void)
  67          {
  68   1       lcdcmd(0x02);  
  69   1       lcdcmd(0x02);
  70   1       lcdcmd(0x28);  //intialise the lcd in 4 bit mode*/
  71   1       lcdcmd(0x28);  //intialise the lcd in 4 bit mode*/
  72   1       
  73   1       lcdcmd(0x0e);  //culcd_rsor blinking
  74   1       lcdcmd(0x06);  //move the culcd_rsor to right side
  75   1       lcdcmd(0x01);  //clear the lcd         
  76   1      
  77   1      //   lcdcmd(0x38);
  78   1      //   lcdcmd(0x0e);
  79   1      //   lcdcmd(0x06);
  80   1      //   lcdcmd(0x01);
  81   1      //   lcdcmd(0x80);
  82   1      
  83   1      }
  84          void lcddata(unsigned char value)
  85          
  86            {
  87   1             
  88   1            lcd_data=value&(0xf0); //send msb 4 bits
  89   1            lcd_rs=1;   //select data register
  90   1            lcd_en=1;   //enable the lcd to execute data
  91   1                delay(3);
  92   1                lcd_en=0;  
  93   1            lcd_data=((value<<4)&(0xf0));      //send lsb 4 bits
  94   1            lcd_rs=1;   //select data register
  95   1            lcd_en=1;   //enable the lcd to execute data
  96   1                delay(3);
  97   1                lcd_en=0;  
  98   1            
  99   1           delay(3); 
 100   1        }  
 101          
 102          
 103          
 104          void msgdisplay(unsigned char b[]) // send string to lcd
 105            {
 106   1      unsigned char s,count=0;
 107   1      for(s=0;b[s]!='\0';s++)
 108   1       {
 109   2        count++;       
 110   2        if(s==16)
 111   2         lcdcmd(0xc0);
 112   2         if(s==32)
 113   2         {
 114   3         lcdcmd(1);
 115   3         count=0;
 116   3         }
 117   2        lcddata(b[s]);
C51 COMPILER V7.06   TX                                                                    04/04/2018 16:23:21 PAGE 3   

 118   2       }
 119   1      }       
 120          
 121          
 122          
 123          void main()
 124          {
 125   1       P2=0xff;
 126   1       P1=0xff;
 127   1       P3=0xff;
 128   1       P0=0xff;
 129   1      
 130   1                       lcd_init();
 131   1                       msgdisplay("Agriculture Robot");
 132   1                       delay(500);
 133   1      
 134   1       while(1)
 135   1         {
 136   2          if(sw1 == 0)
 137   2                 {
 138   3                  while(sw1 == 0);
 139   3                  P1=0xf1;  lcdcmd(1);msgdisplay("f");
 140   3                 }
 141   2               if(sw2 == 0)
 142   2                 {
 143   3                  while(sw2 == 0);
 144   3                  P1=0xf2;  lcdcmd(1);msgdisplay("b");
 145   3                 }
 146   2                if(sw3 == 0)
 147   2                 {
 148   3                  while(sw3 == 0);
 149   3                  P1=0xf3; lcdcmd(1);msgdisplay("l");
 150   3                 }
 151   2                 if(sw4 == 0)
 152   2                 {
 153   3                  while(sw4 == 0);
 154   3                  P1=0xf4;  lcdcmd(1);msgdisplay("r");
 155   3                 }
 156   2                 if(sw5 == 0)
 157   2                 {
 158   3                  while(sw5 == 0);
 159   3                  P1=0xf5;    lcdcmd(1);msgdisplay("s");
 160   3                 }
 161   2      
 162   2                
 163   2                if(sw6 == 0)
 164   2                 {
 165   3                  while(sw6 == 0);
 166   3                  P1=0xf6;     lcdcmd(1);msgdisplay("1");
 167   3                 }
 168   2                 if(sw7 == 0)
 169   2                 {
 170   3                  while(sw7 == 0);
 171   3                  P1=0xf7;   lcdcmd(1);msgdisplay("2");
 172   3                 }                               
 173   2                 if(sw8 == 0)
 174   2                 {
 175   3                  while(sw8 == 0);
 176   3                  P1=0xf8;    lcdcmd(1);msgdisplay("3");
 177   3                 }
 178   2      
 179   2      
C51 COMPILER V7.06   TX                                                                    04/04/2018 16:23:21 PAGE 4   

 180   2                  if(sw9 == 0)
 181   2                 {
 182   3                  while(sw9 == 0);
 183   3                  P1=0xf9;    lcdcmd(1);msgdisplay("4");
 184   3                 }
 185   2                 if(swa == 0)
 186   2                 {
 187   3                  while(swa == 0);
 188   3                  P1=0xfa;   lcdcmd(1);msgdisplay("5");
 189   3                 }
 190   2                  if(swb == 0)
 191   2                 {
 192   3                  while(swb == 0);
 193   3                  P1=0xfb;   lcdcmd(1);msgdisplay("6");
 194   3                 } 
 195   2      
 196   2      
 197   2      
 198   2                 
 199   2                 if(swc == 0)
 200   2                 {
 201   3                  while(swc == 0);
 202   3                  P1=0xfc;    lcdcmd(1);msgdisplay("7");
 203   3                 }
 204   2                  if(swd == 0)
 205   2                 {
 206   3                  while(swd == 0);
 207   3                  P1=0xfd;    lcdcmd(1);msgdisplay("8");
 208   3                 }
 209   2      
 210   2         }
 211   1      
 212   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    548    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
